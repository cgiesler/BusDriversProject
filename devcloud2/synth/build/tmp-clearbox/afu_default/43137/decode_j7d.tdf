--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" CBX_SINGLE_OUTPUT_FILE="OFF" DEVICE_FAMILY="Arria 10" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 19.2 cbx_lpm_add_sub 2019:06:24:17:05:52:SJ cbx_lpm_compare 2019:06:24:17:05:52:SJ cbx_lpm_decode 2019:06:24:17:05:52:SJ cbx_mgl 2019:06:24:18:19:52:SJ cbx_nadder 2019:06:24:17:05:52:SJ cbx_stratix 2019:06:24:17:05:52:SJ cbx_stratixii 2019:06:24:17:05:52:SJ  VERSION_END


-- Copyright (C) 2019  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_j7d
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode6285w[1..0]	: WIRE;
	w_anode6294w[3..0]	: WIRE;
	w_anode6311w[3..0]	: WIRE;
	w_anode6321w[3..0]	: WIRE;
	w_anode6331w[3..0]	: WIRE;
	w_anode6341w[3..0]	: WIRE;
	w_anode6351w[3..0]	: WIRE;
	w_anode6361w[3..0]	: WIRE;
	w_anode6371w[3..0]	: WIRE;
	w_anode6383w[1..0]	: WIRE;
	w_anode6390w[3..0]	: WIRE;
	w_anode6401w[3..0]	: WIRE;
	w_anode6411w[3..0]	: WIRE;
	w_anode6421w[3..0]	: WIRE;
	w_anode6431w[3..0]	: WIRE;
	w_anode6441w[3..0]	: WIRE;
	w_anode6451w[3..0]	: WIRE;
	w_anode6461w[3..0]	: WIRE;
	w_data6283w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode6461w[3..3], w_anode6451w[3..3], w_anode6441w[3..3], w_anode6431w[3..3], w_anode6421w[3..3], w_anode6411w[3..3], w_anode6401w[3..3], w_anode6390w[3..3]), ( w_anode6371w[3..3], w_anode6361w[3..3], w_anode6351w[3..3], w_anode6341w[3..3], w_anode6331w[3..3], w_anode6321w[3..3], w_anode6311w[3..3], w_anode6294w[3..3]));
	w_anode6285w[] = ( (w_anode6285w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode6294w[] = ( (w_anode6294w[2..2] & (! w_data6283w[2..2])), (w_anode6294w[1..1] & (! w_data6283w[1..1])), (w_anode6294w[0..0] & (! w_data6283w[0..0])), w_anode6285w[1..1]);
	w_anode6311w[] = ( (w_anode6311w[2..2] & (! w_data6283w[2..2])), (w_anode6311w[1..1] & (! w_data6283w[1..1])), (w_anode6311w[0..0] & w_data6283w[0..0]), w_anode6285w[1..1]);
	w_anode6321w[] = ( (w_anode6321w[2..2] & (! w_data6283w[2..2])), (w_anode6321w[1..1] & w_data6283w[1..1]), (w_anode6321w[0..0] & (! w_data6283w[0..0])), w_anode6285w[1..1]);
	w_anode6331w[] = ( (w_anode6331w[2..2] & (! w_data6283w[2..2])), (w_anode6331w[1..1] & w_data6283w[1..1]), (w_anode6331w[0..0] & w_data6283w[0..0]), w_anode6285w[1..1]);
	w_anode6341w[] = ( (w_anode6341w[2..2] & w_data6283w[2..2]), (w_anode6341w[1..1] & (! w_data6283w[1..1])), (w_anode6341w[0..0] & (! w_data6283w[0..0])), w_anode6285w[1..1]);
	w_anode6351w[] = ( (w_anode6351w[2..2] & w_data6283w[2..2]), (w_anode6351w[1..1] & (! w_data6283w[1..1])), (w_anode6351w[0..0] & w_data6283w[0..0]), w_anode6285w[1..1]);
	w_anode6361w[] = ( (w_anode6361w[2..2] & w_data6283w[2..2]), (w_anode6361w[1..1] & w_data6283w[1..1]), (w_anode6361w[0..0] & (! w_data6283w[0..0])), w_anode6285w[1..1]);
	w_anode6371w[] = ( (w_anode6371w[2..2] & w_data6283w[2..2]), (w_anode6371w[1..1] & w_data6283w[1..1]), (w_anode6371w[0..0] & w_data6283w[0..0]), w_anode6285w[1..1]);
	w_anode6383w[] = ( (w_anode6383w[0..0] & data_wire[3..3]), enable_wire);
	w_anode6390w[] = ( (w_anode6390w[2..2] & (! w_data6283w[2..2])), (w_anode6390w[1..1] & (! w_data6283w[1..1])), (w_anode6390w[0..0] & (! w_data6283w[0..0])), w_anode6383w[1..1]);
	w_anode6401w[] = ( (w_anode6401w[2..2] & (! w_data6283w[2..2])), (w_anode6401w[1..1] & (! w_data6283w[1..1])), (w_anode6401w[0..0] & w_data6283w[0..0]), w_anode6383w[1..1]);
	w_anode6411w[] = ( (w_anode6411w[2..2] & (! w_data6283w[2..2])), (w_anode6411w[1..1] & w_data6283w[1..1]), (w_anode6411w[0..0] & (! w_data6283w[0..0])), w_anode6383w[1..1]);
	w_anode6421w[] = ( (w_anode6421w[2..2] & (! w_data6283w[2..2])), (w_anode6421w[1..1] & w_data6283w[1..1]), (w_anode6421w[0..0] & w_data6283w[0..0]), w_anode6383w[1..1]);
	w_anode6431w[] = ( (w_anode6431w[2..2] & w_data6283w[2..2]), (w_anode6431w[1..1] & (! w_data6283w[1..1])), (w_anode6431w[0..0] & (! w_data6283w[0..0])), w_anode6383w[1..1]);
	w_anode6441w[] = ( (w_anode6441w[2..2] & w_data6283w[2..2]), (w_anode6441w[1..1] & (! w_data6283w[1..1])), (w_anode6441w[0..0] & w_data6283w[0..0]), w_anode6383w[1..1]);
	w_anode6451w[] = ( (w_anode6451w[2..2] & w_data6283w[2..2]), (w_anode6451w[1..1] & w_data6283w[1..1]), (w_anode6451w[0..0] & (! w_data6283w[0..0])), w_anode6383w[1..1]);
	w_anode6461w[] = ( (w_anode6461w[2..2] & w_data6283w[2..2]), (w_anode6461w[1..1] & w_data6283w[1..1]), (w_anode6461w[0..0] & w_data6283w[0..0]), w_anode6383w[1..1]);
	w_data6283w[2..0] = data_wire[2..0];
END;
--VALID FILE
